#!/usr/bin/env ruby

require 'rubygems'
require 'json'
require 'nkf'
require 'fssm'
require 'sinatra'
require "sinatra/reloader"

t = Thread.new do
  puts "Start monitoring"
  FSSM.monitor('/tmp/mails', '**/*') do
    update {|base, relative| puts "UP #{base}, #{relative}"}
    delete {|base, relative| puts "DEL #{base}, #{relative}"}
    create {|base, relative| puts "CREATE #{base}, #{relative}"}
  end
end

set :bind, '0.0.0.0'
set :public_folder, 'public'

get '/' do
  <<-EOF
<html>
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="/css/pure.css" />
  <link rel="stylesheet" href="/css/app.css" />
  <script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
  <script src="/js/app.js"></script>
</head>
<body>
  <div id="tmp-inbox-root"></div>
</body>
</html>
  EOF
end

get '/api/accounts' do
  `ls mails`.strip!
end

# get '/api/accounts' do
#   "yuki.kodama@gmail.com\nkodama@jvr.jp"
# end

get '/api/emails' do
  f = open "mails/#{params['account']}", 'r'
  raw_inbox = f.read
  f.close
  # inbox = NKF.nkf '--ic=ISO-2022-JP --oc=UTF-8 -Lw -m', raw_inbox
  inbox = raw_inbox

  body = ''
  emails = []
  inbox.lines do |line|
    if %r{^[\w-]:\s}.match(line).nil?
      body += line
      next
    else
      emails.unshift body unless body.empty?
      body = line
    end
  end
  emails.unshift body unless body.empty?

  content_type :json
  { data: emails }.to_json
end
